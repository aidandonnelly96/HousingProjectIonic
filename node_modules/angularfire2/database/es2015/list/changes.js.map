{"version":3,"sources":["../../../../../src/database/list/changes.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AACrD,OAAO,wBAAwB,CAAC;AAChC,OAAO,2BAA2B,CAAC;AAGnC,MAAM,sBAAyB,GAAkB,EAAE,MAAoB;IACrE,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAC7D,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;SACtC,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACxB,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC;QAC/C,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACpB,KAAK,aAAa;gBAChB,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,MAAM,CAAC,CAAC;YAC9B,KAAK,eAAe;gBAElB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAQ,CAAC,GAAG,KAAK,OAAQ,CAAC,GAAG,CAAC,CAAC;YAC9D,KAAK,eAAe;gBAClB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAQ,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/D,KAAK,aAAa;gBAChB,MAAM,MAAM,GAAG,WAAW,CAAC,OAAO,EAAE,OAAQ,CAAC,GAAG,CAAC,CAAA;gBACjD,EAAE,CAAA,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACf,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1C,MAAM,OAAO,GAAG,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;oBAChD,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,OAAO,CAAC;gBACjB,CAAC;gBACD,MAAM,CAAC,OAAO,CAAC;YAEjB;gBACE,MAAM,CAAC,OAAO,CAAC;QACnB,CAAC;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC","file":"changes.js","sourceRoot":"","sourcesContent":["import { fromRef } from '../observable/fromRef';\nimport { Observable } from 'rxjs/Observable';\nimport { DatabaseQuery, ChildEvent, SnapshotChange, AngularFireAction, SnapshotAction } from '../interfaces';\nimport { positionFor, positionAfter } from './utils';\nimport 'rxjs/add/operator/scan';\nimport 'rxjs/add/observable/merge';\n\n// TODO(davideast): check safety of ! operator in scan\nexport function listChanges<T>(ref: DatabaseQuery, events: ChildEvent[]): Observable<SnapshotAction[]> {\n  const childEvent$ = events.map(event => fromRef(ref, event));\n  return Observable.merge(...childEvent$)\n  .scan((current, action) => {\n    const { payload, type, prevKey, key } = action; \n    switch (action.type) {\n      case 'child_added':\n        return [...current, action];\n      case 'child_removed':\n        // ! is okay here because only value events produce null results\n        return current.filter(x => x.payload!.key !== payload!.key);\n      case 'child_changed':\n        return current.map(x => x.payload!.key === key ? action : x);\n      case 'child_moved':\n        const curPos = positionFor(current, payload!.key)\n        if(curPos > -1) {\n          const data = current.splice(curPos, 1)[0];\n          const newPost = positionAfter(current, prevKey);\n          current.splice(newPost, 0, data);\n          return current;\n        }\n        return current;\n      // default will also remove null results\n      default:\n        return current;\n    }\n  }, []);\n}\n"]}