{"version":3,"sources":["../../../src/@ionic-native/plugins/spinner-dialog/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AASxE;;;;;;;;;;;;;;;;;GAiBG;AASH,IAAa,aAAa;IAAS,iCAAiB;IAApD;;IA4BA,CAAC;IA1BC;;;;;;OAMG;IAIH,4BAAI,GAAJ,UAAK,KAAc,EAAE,OAAgB,EAAE,cAAoB,EAAE,UAAoC,IAAU,CAAC;IAE5G;;OAEG;IAIH,4BAAI,GAAJ,cAAe,CAAC;IAQlB,oBAAC;AAAD,CA5BA,AA4BC,CA5BkC,iBAAiB,GA4BnD;AANM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAfA;IAHC,OAAO,CAAC;QACP,IAAI,EAAE,IAAI;KACX,CAAC;;;;yCAC0G;AAQ5G;IAHC,OAAO,CAAC;QACP,IAAI,EAAE,IAAI;KACX,CAAC;;;;yCACc;AApBL,aAAa;IARzB,MAAM,CAAC;QACN,UAAU,EAAE,eAAe;QAC3B,MAAM,EAAE,+BAA+B;QACvC,SAAS,EAAE,eAAe;QAC1B,IAAI,EAAE,0DAA0D;QAChE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,iBAAiB,EAAE,SAAS,CAAC;KAC5D,CAAC;GAEW,aAAa,CA4BzB;SA5BY,aAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface SpinnerDialogIOSOptions {\n  overlayOpacity?: number;\n  textColorRed?: number;\n  textColorGreen?: number;\n  textColorBlue?: number;\n}\n\n/**\n * @name Spinner Dialog\n * @description\n * @usage\n * ```typescript\n * import { SpinnerDialog } from '@ionic-native/spinner-dialog';\n *\n * constructor(private spinnerDialog: SpinnerDialog) { }\n *\n * ...\n *\n * this.spinnerDialog.show();\n *\n * this.spinnerDialog.hide();\n * ```\n * @interfaces\n * SpinnerDialogIOSOptions\n */\n@Plugin({\n  pluginName: 'SpinnerDialog',\n  plugin: 'cordova-plugin-native-spinner',\n  pluginRef: 'SpinnerDialog',\n  repo: 'https://github.com/greybax/cordova-plugin-native-spinner',\n  platforms: ['Android', 'iOS', 'Windows Phone 8', 'Windows']\n})\n\nexport class SpinnerDialog extends IonicNativePlugin {\n\n  /**\n   * Shows the spinner dialog\n   * @param title {string} Spinner title (shows on Android only)\n   * @param message {string} Spinner message\n   * @param cancelCallback {boolean|function} Set to true to set spinner not cancelable. Or provide a function to call when the user cancels the spinner.\n   * @param iOSOptions {object} Options for iOS only\n   */\n  @Cordova({\n    sync: true\n  })\n  show(title?: string, message?: string, cancelCallback?: any, iOSOptions?: SpinnerDialogIOSOptions): void { }\n\n  /**\n   * Hides the spinner dialog if visible\n   */\n  @Cordova({\n    sync: true\n  })\n  hide(): void { }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}